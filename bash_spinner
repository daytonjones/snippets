# Usage: bash_spinner <PID>
# Will print a color changing spinner until <PID> has exited
# roughly every 30 seconds a '.' will be printed before the
# spinner to show rough elapsed time

function bash_spinner () {
    tput civis              # hide the cursor
    mypid=$1                # get the PID of the program we're waiting for
    spin='/-\|-*'           # set the characters to use
    color=($(seq 0 255 ) )  # use the 256 ascii color codes
    RANDOM=$$$(date +%s)
    i=0
    step=0
    while kill -0 $mypid 2>/dev/null        # while the PID is running, loop
    do
        if [[ "$step" -eq 220 ]];then       # if roughly 30 seconds have passed, set dot=true and reset counter
            step=0
            dot="true"
        fi
        col=$(tput setaf ${color[$RANDOM % ${#color[@]} ]})     # get a random ascii color
        i=$(( (i+1) %4 ))                                       # get the next spinner character
        if [[ "$dot" == "true" ]];then                          # if dot=true, print . before the spinner character
            printf "\b\e[0m.${col}${spin:$i:1}"
            dot="false"                                         # set dot back to false
        else
            printf "\b${col}${spin:$i:1}"                       # if dot=false, only print the spinner character
        fi
        sleep .1
        ((step=$step+1))                                        # increment step counter
    done
    tput cnorm              # show the cursor again
    printf "\r\e[0m"        # Set color back to "normal"
}
